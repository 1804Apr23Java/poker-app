CREATE TABLE USERS (
    USER_ID INTEGER PRIMARY KEY,
    GAME_ID INTEGER,
    EMAIL VARCHAR2(50),
    PASSWORD VARCHAR2(50),
    FNAME VARCHAR2(50),
    LNAME VARCHAR2(50),
    USERNAME VARCHAR2(50),
    ISHOST BOOLEAN --if user is gamehost
);
/
CREATE TABLE ADMINS (
    USER_ID INTEGER PRIMARY KEY --users in this table are admins
);
/
CREATE TABLE STATS (
    USER_ID INTEGER PRIMARY KEY,
    TOTAL_WINNINGS INTEGER, 
    WINS INTEGER,
    LOSSES INTEGER
);
/
CREATE TABLE CURRENTHANDS (
    USER_ID INTEGER PRIMARY KEY,
    HAND BLOB, --user's hand
    WINNINGS INTEGER, --cannot be negative
    HAS_FOLDED BOOLEAN, --is the user still in the game
    PLAYER_ORDER INTEGER --1-4 representing turn order
);
/
CREATE TABLE GAMESTATES (
    GAME_ID INTEGER PRIMARY KEY,
    DECK_STATE BLOB, --order of cards in deck
    CURRENT_TURN INTEGER, --which user's turn
    POT INTEGER, --how much money 
    STATUS INTEGER, --ended (0), active (1), paused (2) 
    TIME_LEFT INTEGER, --seconds left
    TABLE_STATE BLOB --what cards are on the table
);
/
--FOREIGN KEY CONSTRAINTS
ALTER TABLE USERS
ADD CONSTRAINT FK_USERS_GAME_ID
FOREIGN KEY (GAME_ID) REFERENCES GAMESTATES(GAME_ID);
/
ALTER TABLE ADMINS
ADD CONSTRAINT FK_ADMINS_USER_ID
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID);
/
ALTER TABLE STATS
ADD CONSTRAINT FK_STATS_USER_ID
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID);
/
ALTER TABLE CURRENTHANDS
ADD CONSTRAINT FK_CURRENTHANDS_USER_ID
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID);
--SEQUENCES
CREATE SEQUENCE SQ_USERS_PK
START WITH 1000
INCREMENT BY 10;
/
CREATE SEQUENCE SQ_GAMESTATES_PK
START WITH 1000
INCREMENT BY 10;
--TRIGGERS
CREATE OR REPLACE TRIGGER TR_INSERT_USER_ID
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
    SELECT SQ_USERS_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
 END;
 /
 CREATE OR REPLACE TRIGGER TR_INSERT_GAME_ID
BEFORE INSERT ON GAMESTATES
FOR EACH ROW
BEGIN
    SELECT SQ_GAMESTATES_PK.NEXTVAL INTO :NEW.GAME_ID FROM DUAL;
 END;
 /